% script_demo_fcn_Path_findSensorHitOnWall
% This is a script to DEMONSTRATE the function: fcn_Path_findSensorHitOnWall.m
% This function was written on 2025_06_23 by S. Brennan, from original
% version (started 2020_12_31)
% Questions or comments? sbrennan@psu.edu

close all


%% Demonstration cases
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% _____                                 _             _   _                _____
% |  __ \                               | |           | | (_)              / ____|
% | |  | | ___ _ __ ___   ___  _ __  ___| |_ _ __ __ _| |_ _  ___  _ __   | |     __ _ ___  ___  ___
% | |  | |/ _ \ '_ ` _ \ / _ \| '_ \/ __| __| '__/ _` | __| |/ _ \| '_ \  | |    / _` / __|/ _ \/ __|
% | |__| |  __/ | | | | | (_) | | | \__ \ |_| | | (_| | |_| | (_) | | | | | |___| (_| \__ \  __/\__ \
% |_____/ \___|_| |_| |_|\___/|_| |_|___/\__|_|  \__,_|\__|_|\___/|_| |_|  \_____\__,_|___/\___||___/
% See: http://patorjk.com/software/taag/#p=display&v=0&f=Big&t=Demonstration%20Cases
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All demonstration case figures start with the number 1

%% Demo of many different intersections checking
fig_num = 10001;
fprintf(1,'Figure: %.0f: Demo of many different intersections.\n',fig_num);

figure(fig_num); clf;

clear inputs
inputs.fig_num = fig_num;
inputs.wall_start = [0 0; -3  3; 15 15; 7 7; 11 11;  7 3; 0 10; 10 16; 18 18; 20 0; 5.9 6; 13 14];
inputs.wall_end   = [5 0;  3 -3; 15 10; 9 9; 11 11; -1 7; 5 15; 14 16; 20 20; 20 0; 4 7;   13 10];
inputs.sensor_vector_start = [0 0];
inputs.sensor_vector_end   = [15 15];
inputs.flag_search_return_type = 1;
inputs.flag_search_range_type = 0;
inputs.tolerance = [];

actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Many different types at once');


%% Demo of basic intersections checking
fig_num = 10002;
fprintf(1,'Figure: %.0f: Demo of basic intersections.\n',fig_num);

figure(fig_num); clf;

subplot(4,2,1);
clear inputs
inputs.fig_num = fig_num;
inputs.wall_start = [7 3; 0 10; 10 16;  5.9 6; 13 14];
inputs.wall_end   = [-1 7; 5 15; 14 16; 4 7;   13 10];
inputs.sensor_vector_start = [0 0];
inputs.sensor_vector_end   = [15 15];
inputs.flag_search_return_type = 1;
inputs.flag_search_range_type = 0;
inputs.tolerance = [];

actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range=0');

subplot(4,2,2);
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 0, negative tolerance');

subplot(4,2,3);
inputs.flag_search_range_type = 1;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 1');

subplot(4,2,4);
inputs.flag_search_range_type = 1;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 1, negative tolerance');

subplot(4,2,5);
inputs.flag_search_range_type = 2;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 2');

subplot(4,2,6);
inputs.flag_search_range_type = 2;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 2, negative tolerance');


subplot(4,2,7);
inputs.flag_search_range_type = 3;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 3');

subplot(4,2,8);
inputs.flag_search_range_type = 3;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 3, negative tolerance');
sgtitle('Basic intersections');

%% Demo of endpoint intersections checking
fig_num = 10003;
fprintf(1,'Figure: %.0f: Demo of endpoint intersections.\n',fig_num);

figure(fig_num); clf;

subplot(4,2,1);
clear inputs
inputs.fig_num = fig_num;
inputs.wall_start = [0 0; -3  3; 15 15;  7 3;  5.9 6];
inputs.wall_end   = [5 0;  3 -3; 15 10; -1 7;   4 7];
inputs.sensor_vector_start = [0 0];
inputs.sensor_vector_end   = [15 15];
inputs.flag_search_return_type = 1;
inputs.flag_search_range_type = 0;
inputs.tolerance = [];

actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range=0');

subplot(4,2,2);
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 0, negative tolerance');

subplot(4,2,3);
inputs.flag_search_range_type = 1;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 1');

subplot(4,2,4);
inputs.flag_search_range_type = 1;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 1, negative tolerance');

subplot(4,2,5);
inputs.flag_search_range_type = 2;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 2');

subplot(4,2,6);
inputs.flag_search_range_type = 2;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 2, negative tolerance');


subplot(4,2,7);
inputs.flag_search_range_type = 3;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 3');

subplot(4,2,8);
inputs.flag_search_range_type = 3;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 3, negative tolerance');
sgtitle('Demo of endpoint intersections');

%% Demo of single point intersections checking
fig_num = 10004;
fprintf(1,'Figure: %.0f: Demo of point wall intersections.\n',fig_num);

figure(fig_num); clf;

subplot(4,2,1);
clear inputs
inputs.fig_num = fig_num;
inputs.wall_start = [11 11; 20 0; 20 20];
inputs.wall_end   = [11 11; 20 0; 20 20];
inputs.sensor_vector_start = [0 0];
inputs.sensor_vector_end   = [15 15];
inputs.flag_search_return_type = 1;
inputs.flag_search_range_type = 0;
inputs.tolerance = [];

actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range=0');

subplot(4,2,2);
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 0, negative tolerance');

subplot(4,2,3);
inputs.flag_search_range_type = 1;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 1');

subplot(4,2,4);
inputs.flag_search_range_type = 1;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 1, negative tolerance');

subplot(4,2,5);
inputs.flag_search_range_type = 2;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 2');

subplot(4,2,6);
inputs.flag_search_range_type = 2;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 2, negative tolerance');


subplot(4,2,7);
inputs.flag_search_range_type = 3;
inputs.tolerance = [];
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 3');

subplot(4,2,8);
inputs.flag_search_range_type = 3;
inputs.tolerance = -0.1;
actual = struct;
[actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
    fcn_Path_findSensorHitOnWall(...
    inputs.wall_start, inputs.wall_end,...
    inputs.sensor_vector_start,inputs.sensor_vector_end,...
    (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
    (inputs.tolerance), (inputs.fig_num));
title('Range = 3, negative tolerance');
sgtitle('fill in');

%% Demo of wall distance to point sensor
fig_num = 10005;
fprintf(1,'Figure: %.0f: Demo of wall distance to point sensor.\n',fig_num);

figure(fig_num); clf;

for flag_search_range_type = 0:3
    subplot(2,2,flag_search_range_type+1);
    clear inputs
    inputs.fig_num = fig_num;
    inputs.wall_start = [-5 -5; 0 -5; 3 3; 2 5; -4 4; -5 0];
    inputs.wall_end   = [ 0 -5; 3  3; 3 6; 0 5; 0 0;  -3 0];
    inputs.sensor_vector_start = [0 0];
    inputs.sensor_vector_end   = [0 0];
    inputs.flag_search_return_type = 1;
    inputs.flag_search_range_type = flag_search_range_type;
    inputs.tolerance = [];

    actual = struct;
    [actual.distance, actual.location, actual.path_segment, actual.t, actual.u] = ...
        fcn_Path_findSensorHitOnWall(...
        inputs.wall_start, inputs.wall_end,...
        inputs.sensor_vector_start,inputs.sensor_vector_end,...
        (inputs.flag_search_return_type), (inputs.flag_search_range_type), ...
        (inputs.tolerance), (inputs.fig_num));
    title(sprintf('flag_search_range_type = %.0f',flag_search_range_type),'Interpreter','none');
end
sgtitle('Demonstration of distance calculation to nearest wall');
