% script_test_fcn_Path_cleanPathFromForwardBackwardJogs
% Tests the function: fcn_Path_cleanPathFromForwardBackwardJogs

% Revision history
% 2020_01_09
% -- first write of the code
% -- need to add more test cases
% 2025_06_30
% -- testing more with real-world cases
% 2025_08_02
% - Added Bug Test Case 90005
%   * BUG - real-world example that was not previously working

close all;

%% Demonstration cases
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% _____                                 _             _   _                _____
% |  __ \                               | |           | | (_)              / ____|
% | |  | | ___ _ __ ___   ___  _ __  ___| |_ _ __ __ _| |_ _  ___  _ __   | |     __ _ ___  ___  ___
% | |  | |/ _ \ '_ ` _ \ / _ \| '_ \/ __| __| '__/ _` | __| |/ _ \| '_ \  | |    / _` / __|/ _ \/ __|
% | |__| |  __/ | | | | | (_) | | | \__ \ |_| | | (_| | |_| | (_) | | | | | |___| (_| \__ \  __/\__ \
% |_____/ \___|_| |_| |_|\___/|_| |_|___/\__|_|  \__,_|\__|_|\___/|_| |_|  \_____\__,_|___/\___||___/
% See: http://patorjk.com/software/taag/#p=display&v=0&f=Big&t=Demonstration%20Cases
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All demonstration case figures start with the number 1

%% Basic call example
fig_num = 10001;
titleString = sprintf('Basic call example, eliminating first point');
fprintf(1,'Figure %.0f: %s\n',fig_num, titleString);
figure(fig_num); clf;

path_with_jogs = [0 0; 1 1; 2 2; 3.3 3.36; 2.5 2.9; 3.5 3.6; 5 5];
clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
    (path_with_jogs,(fig_num));
title(titleString, 'Interpreter','none');

% Check variable types
assert(isnumeric(clean_path));

% Check variable sizes
assert(length(clean_path(:,1))<=length(path_with_jogs(:,1)));

% Check variable values
assert(isequal(clean_path,[0 0; 1 1; 2 2; 3.3 3.36; 3.5 3.6; 5 5]));

% Make sure plot opened up
assert(isequal(get(gcf,'Number'),fig_num));

%% DEMO: showing jog that overlaps in forward/back
fig_num = 10002;
titleString = sprintf('DEMO: showing jog that overlaps in forward/back');
fprintf(1,'Figure %.0f: %s\n',fig_num, titleString);
figure(fig_num); clf;

path_with_jogs = [0 0; 1 0; 1.5 0; 0.8 0; 2 2; 3 3];
clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
    (path_with_jogs,(fig_num));
title(titleString, 'Interpreter','none');

% Check variable types
assert(isnumeric(clean_path));

% Check variable sizes
assert(length(clean_path(:,1))<=length(path_with_jogs(:,1)));

% % Check variable values
% assert(isequal(clean_path,[0 0; 1 1; 2 2; 3.3 3.36; 3.5 3.6; 5 5]));

% Make sure plot opened up
assert(isequal(get(gcf,'Number'),fig_num));

%% Fast Mode Tests
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  ______        _     __  __           _        _______        _
% |  ____|      | |   |  \/  |         | |      |__   __|      | |
% | |__ __ _ ___| |_  | \  / | ___   __| | ___     | | ___  ___| |_ ___
% |  __/ _` / __| __| | |\/| |/ _ \ / _` |/ _ \    | |/ _ \/ __| __/ __|
% | | | (_| \__ \ |_  | |  | | (_) | (_| |  __/    | |  __/\__ \ |_\__ \
% |_|  \__,_|___/\__| |_|  |_|\___/ \__,_|\___|    |_|\___||___/\__|___/
%
%
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Fast%20Mode%20Tests
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Figures start with 8

close all;
fprintf(1,'Figure: 8XXXXXX: Demo of fast mode cases\n');

%% Basic example - NO FIGURE
fig_num = 80001;
fprintf(1,'Figure: %.0f: Demo of fast mode, empty fig_num\n',fig_num);
figure(fig_num); close(fig_num);

path_with_jogs = [0 0; 1 1; 2 2.2; 3.3 3; 2.5 2.9; 3.5 3.6; 5 5];
clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
    (path_with_jogs,([]));

% Check variable types
assert(isnumeric(clean_path));

% Check variable sizes
assert(length(clean_path(:,1))<=length(path_with_jogs(:,1)));

% Make sure plot did NOT open up
figHandles = get(groot, 'Children');
assert(~any(figHandles==fig_num));


%% Basic fast mode - NO FIGURE, FAST MODE
fig_num = 80002;
fprintf(1,'Figure: %.0f: Demo of fast mode, fig_num=-1\n',fig_num);
figure(fig_num); close(fig_num);

path_with_jogs = [0 0; 1 1; 2 2.2; 3.3 3; 2.5 2.9; 3.5 3.6; 5 5];
clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
    (path_with_jogs,(-1));

% Check variable types
assert(isnumeric(clean_path));

% Check variable sizes
assert(length(clean_path(:,1))<=length(path_with_jogs(:,1)));

% Make sure plot did NOT open up
figHandles = get(groot, 'Children');
assert(~any(figHandles==fig_num));


%% Compare speeds of pre-calculation versus post-calculation versus a fast variant
fig_num = 80003;
fprintf(1,'Figure: %.0f: Fast mode comparisons\n',fig_num);
figure(fig_num);
close(fig_num);

path_with_jogs = [0 0; 1 1; 2 2.2; 3.3 3; 2.5 2.9; 3.5 3.6; 5 5];

Niterations = 20;

% Do calculation without pre-calculation
tic;
for ith_test = 1:Niterations
    % Call the function
    clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
        (path_with_jogs,([])); %#ok<NASGU>
end
slow_method = toc;

% Do calculation with pre-calculation, FAST_MODE on
tic;
for ith_test = 1:Niterations
    % Call the function
    clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
        (path_with_jogs,(-1)); %#ok<NASGU>
end
fast_method = toc;

% Make sure plot did NOT open up
figHandles = get(groot, 'Children');
assert(~any(figHandles==fig_num));

% Plot results as bar chart
figure(373737);
clf;
hold on;

X = categorical({'Normal mode','Fast mode'});
X = reordercats(X,{'Normal mode','Fast mode'}); % Forces bars to appear in this exact order, not alphabetized
Y = [slow_method fast_method ]*1000/Niterations;
bar(X,Y)
ylabel('Execution time (Milliseconds)')


% Make sure plot did NOT open up
figHandles = get(groot, 'Children');
assert(~any(figHandles==fig_num));



%% BUG cases
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  ____  _    _  _____
% |  _ \| |  | |/ ____|
% | |_) | |  | | |  __    ___ __ _ ___  ___  ___
% |  _ <| |  | | | |_ |  / __/ _` / __|/ _ \/ __|
% | |_) | |__| | |__| | | (_| (_| \__ \  __/\__ \
% |____/ \____/ \_____|  \___\__,_|___/\___||___/
%
% See: http://patorjk.com/software/taag/#p=display&v=0&f=Big&t=BUG%20cases
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% All bug case figures start with the number 9

close all;

%% BUG - cuts off path when should not (FIXED)
fig_num = 90001;
titleString = sprintf('BUG - cuts off path when should not (FIXED)');
fprintf(1,'Figure %.0f: %s\n',fig_num, titleString);
figure(fig_num); clf;

load('testData1_fcn_Path_cleanPathFromForwardBackwardJogs.mat','rawPath');
path_with_jogs = rawPath;
clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
    (path_with_jogs,(fig_num));
title(titleString, 'Interpreter','none');

% Check variable types
assert(isnumeric(clean_path));

% Check variable sizes
assert(length(clean_path(:,1))<=length(path_with_jogs(:,1)));

% Make sure plot opened up
assert(isequal(get(gcf,'Number'),fig_num));

%% BUG - cuts off path when should not (FIXED)
fig_num = 90002;
titleString = sprintf('BUG - cuts off path when should not (FIXED)');
fprintf(1,'Figure %.0f: %s\n',fig_num, titleString);
figure(fig_num); clf;

load('testData2_fcn_Path_cleanPathFromForwardBackwardJogs.mat','rawPath');
path_with_jogs = rawPath;
clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
    (path_with_jogs,(fig_num));
title(titleString, 'Interpreter','none');

% Check variable types
assert(isnumeric(clean_path));

% Check variable sizes
assert(length(clean_path(:,1))<=length(path_with_jogs(:,1)));

% Make sure plot opened up
assert(isequal(get(gcf,'Number'),fig_num));


%% BUG - cuts off path weirdly
fig_num = 90003;
titleString = sprintf('Real world example where path cuts wierdly');
fprintf(1,'Figure %.0f: %s\n',fig_num, titleString);
figure(fig_num); clf;

load('testData3_fcn_Path_cleanPathFromForwardBackwardJogs.mat','rawPath');
path_with_jogs = rawPath;
clean_path = fcn_Path_cleanPathFromForwardBackwardJogs...
    (path_with_jogs,(fig_num));
title(titleString, 'Interpreter','none');

% Check variable types
assert(isnumeric(clean_path));

% Check variable sizes
assert(length(clean_path(:,1))<=length(path_with_jogs(:,1)));

% Make sure plot opened up
assert(isequal(get(gcf,'Number'),fig_num));

%% BUG - real-world example that was not previously working
fig_num = 90004;
titleString = sprintf('BUG - real-world example that was not previously working');
fprintf(1,'Figure %.0f: %s\n',fig_num, titleString);
figure(fig_num); clf;

startPoints = [...
   2.382127025781378  -1.581756646038485
   2.309171928057874  -1.145750021505348
   2.282662767131663  -0.995056722022869
   2.287367624690293  -0.778032815426177
   2.247744261413241  -0.525867327852700
   2.208279641368899  -0.206304726305456
   2.145775523032383   0.118860304258495
   2.081955302838964   0.549011789156652
   2.078994206962031   0.567204558880521
   2.078933740172697   0.568964862575723
   2.076723186980467   0.794802658085192
   2.037745080745749   0.946168401815517
   2.027127603837225   1.254506866856157
   1.989338390626548   1.497173562918755
   2.001895008702639   1.641780062721229
   1.930135513814969   2.063220203428516
   1.932244116790294   2.211620463493408
   1.921302695557221   2.310029363908730
   1.916529472111721   2.355556066469140
   1.895158394421256   2.766151335663927
   1.800743553804144   3.058277285561736
   1.774065498775499   3.204378149659556
   1.738390081410453   3.624616415861778
   1.736715683315172   3.658424239320890
   1.738251001646683   3.703765529346810
   1.710917908567398   3.849388157275846
   1.643677175069175   4.262835799113564
   1.639326954526304   4.284805772741763
   1.628631663785328   4.399983417777301
   1.509471946209048   4.857135697111977
   1.491750965937543   4.904229031383296
   1.447182475622905   5.010201911953916
   1.377562699750000   5.301357478442928
   1.340499137030754   5.360135238133777
   1.263499783415980   5.647482315238316
   1.208577146194354   5.855095468604810
   1.179318205599123   5.981170693175845
   1.143385888457039   6.241678027040651
   1.068500574987591   6.647400820530041
   1.059910652824073   6.685259126668516
   1.057073362253109   6.692750706013676
   1.033053970738646   6.789179516398365
   0.991625343454381   6.898320655866334
   0.994974170539389   7.050456485628965
   0.843086642727983   7.485930215432880
   0.833732091940116   7.629193204207151
   0.781665534357850   7.718449009684743
   0.769635889385288   7.793001820512802
   0.648630144336804   8.182978125966031
   0.629682460540445   8.236232594995975
   0.613840503861417   8.320461017435294
   0.574497916559255   8.409176243869791
   0.529618299573746   8.481536623457213
   0.450912489717096   8.927496809084737
   0.383935274254919   9.111325249746969
   0.357805600339796   9.150294128399908
   0.242931587365623   9.465379059076781
   0.229687803219044   9.493431247348701
   0.134087767346208   9.890514023209640
   0.071147446804269  10.000000000000000
   0.091057580203941  10.000000000000000
  -0.047789575221813  10.000000000000000
  -0.259745868263779  10.000000000000000
  -0.370553034112621  10.000000000000000
  -0.658240694876143  10.000000000000000
  -0.669463430506475  10.000000000000000
  -0.859277180835856  10.000000000000000
  -0.892023047792607  10.000000000000000
  -1.149465154578340  10.000000000000000
  -1.251040191691276  10.000000000000000
  -1.656726309719013  10.000000000000000
  -1.833139380585729  10.000000000000000
  -2.013625078144860  10.000000000000000
  -2.014760834050346  10.000000000000000
  -2.170957689189497  10.000000000000000
  -2.330972248301397  10.000000000000000
  -2.710601891802636  10.000000000000000
  -2.992748221804290  10.000000000000000
  -3.020954585608771  10.000000000000000
  -3.197003387642314  10.000000000000000
  -3.235423364320732  10.000000000000000
  -3.235757599964169  10.000000000000000
  -3.643782171789784  10.000000000000000
  -3.692488775570480  10.000000000000000
  -3.902054052470677  10.000000000000000
  -3.941949540193592  10.000000000000000
  -4.078115640214073  10.000000000000000
  -4.083859515996343  10.000000000000000
  -4.162767393736051  10.000000000000000
  -4.324224185901409   9.824204927805750
  -4.325880395739054   9.820062647102835
  -4.432784176320409   9.599120942443028
  -4.597640105368888   9.222377458826704
  -4.602683083428422   9.210164973474050
  -4.612489276395815   9.185170823632577
  -4.615083444945378   9.178552386504375
  -4.626614021409593   9.148756269663032
  -4.781423335372860   8.747382452112625
  -4.810973304679529   8.672431254299688
  -4.947993451479954   8.286427216964935
  -4.959102314083293   8.253145858738813
  -4.965045410705735   8.235550786290254
  -4.972009799789523   8.214445469432942
  -4.972227178981768   8.213788728541733
  -5.109066318858013   7.828075050062203
  -5.109944750386238   7.825461244932232
  -5.119394726265670   7.796340238247943
  -5.230450581869198   7.371238730203682
  -5.234703181133832   7.355093003656838
  -5.237672886395666   7.343446789410438
  -5.281746177721658   7.208075515121629
  -5.351014779112636   6.807068765375808
  -5.359553112519252   6.755667885722215
  -5.366487306530830   6.715809300534199
  -5.368248958765422   6.700955852990323
  -5.372466700692971   6.679708032518400
  -5.385746731599895   6.586751705643033
  -5.401494744096520   6.550169464730833
  -5.458886892445668   6.147405351376388
  -5.467925106341032   6.083264619606087
  -5.474651158863979   6.027961491566562
  -5.480537105230536   5.993080497838536
  -5.494957661047779   5.920652273246504
  -5.528868932107232   5.514900154668452
  -5.530973404663182   5.492396407229674
  -5.535001498446442   5.455292717972746
  -5.563743333585643   5.053228312349077
  -5.592992191748974   4.632324361636435
  -5.624714023239346   4.237841961385373
  -5.439525900119217   3.893751887645100
  -5.379570499640568   3.764138562841199
  -5.292513596007574   3.597390056874884
  -5.192967773591474   3.411700394532549
  -5.122815474759375   3.269336729033403
  -5.008209796913376   3.072346026374110
  -4.893868849143731   2.866458210008825
  -4.721555659377401   2.492591187628865
  -4.531866019016983   2.124567702893874
  -4.520893642630461   2.101523662772469
  -4.501774238124407   2.059945187150757
  -4.462873870486730   1.976716786684448
  -4.423539650550629   1.935787610368081
  -4.406598936603188   1.900383874413231
  -4.355137300920402   1.782931943977208
  -4.202255115087323   1.473125816153161
  -4.199730851980305   1.285839075126465
  -4.000276368004180   0.905426214094758
  -3.996662089808289   0.898472669387540
  -3.838961004441859   0.619592854696690
  -3.736413873521820   0.381280869678112
  -3.723047833796670   0.187147708694605
  -3.516875080173192  -0.201202124065181
  -3.439482640910744  -0.357332257127539
  -3.354916144893233  -0.517268436158132
  -3.268818668096858  -0.765079997863634
  -3.086543886950693  -1.114559700263334
  -3.046634774406918  -1.257583726737489
  -2.994326243340959  -1.411383551271115
  -2.878513161246139  -1.707314616711166
  -2.777421144947089  -2.166422374542876
  -2.765874560939967  -2.206323457311877
  -2.755129658279582  -2.234217835743047
  -2.754286240495925  -2.236467653329442
  -2.745504680173373  -2.518142093681397
  -2.667430203472927  -2.953331623350579
  -2.658146217169409  -3.010513172798348
  -2.651084455894715  -3.059060547106817
  -2.602561992100308  -3.337377148605635
  -2.448621451024428  -3.715397731323853
  -2.458283482291985  -3.838740401338469
  -2.430358025685290  -3.919683859554162
  -2.348871181571465  -4.243997441669140
  -2.334001846869088  -4.518860022107216
  -2.307086173048710  -4.959220578259852
  -2.304739239618573  -4.996134104401208
  -2.299604790935347  -5.139976864436457
  -2.207209803340356  -5.567047385826492
  -2.191308181815811  -5.631691411090072
  -2.144412481188230  -5.860932881630895
  -2.090648056755816  -6.034815762555885
  -2.081109112815798  -6.224935949403034
  -2.052563356153207  -6.356457365810311
  -2.044928038291765  -6.511684708787414
  -2.071157523700078  -6.737992326953096
  -2.070573965188356  -7.171919055273785
  -2.069606240591527  -7.205460378491222
  -2.100585720113691  -7.440513026796211
  -2.093546847374232  -7.832447477333912
  -2.020201963499193  -8.092229036309801
  -2.014954390715236  -8.109599412550326
  -1.965988605888858  -8.496101335825498
  -1.948962010360359  -8.916951766126401
  -1.948345626571796  -8.924022834859050
  -1.945031492521059  -8.947358798273743
  -1.944100384527854  -9.036062247214780
  -1.921093530579888  -9.347470931846175
  -1.969271602172046  -9.585458122458622
  -1.923394885028928  -9.993394957832987
  -1.912317451889930 -10.000000000000000
  -1.888189168968844 -10.000000000000000
  -1.883214120096429 -10.000000000000000
  -1.850137376523163 -10.000000000000000
  -1.842593740205858 -10.000000000000000
  -1.438150056073449 -10.000000000000000
  -1.282150569571618 -10.000000000000000
  -1.271275308298065 -10.000000000000000
  -1.230386410420707 -10.000000000000000
  -0.959776160069638 -10.000000000000000
  -0.935579568890773 -10.000000000000000
  -0.695674454731274 -10.000000000000000
  -0.508236261560299 -10.000000000000000
  -0.403724428034244 -10.000000000000000
  -0.113202580216866 -10.000000000000000
   0.009725508986301 -10.000000000000000
   0.132653598189468 -10.000000000000000
   0.239109164411178 -10.000000000000000
   0.362037253614345 -10.000000000000000
   0.484965342817512 -10.000000000000000
   0.640757718857143 -10.000000000000000
   0.695216122641762 -10.000000000000000
   0.749674526426381 -10.000000000000000
   0.804132930210999 -10.000000000000000
   0.858591333995618 -10.000000000000000
   0.909635296066742 -10.000000000000000
   1.305228628984685 -10.000000000000000
   1.444381615187966 -10.000000000000000
   1.447659155754255 -10.000000000000000
   1.481076815891520 -10.000000000000000
   1.482235820071811 -10.000000000000000
   1.881985159626964 -10.000000000000000
   1.969735542518854 -10.000000000000000
   1.977868889794281 -10.000000000000000
   1.984219329949916 -10.000000000000000
   1.994846415902377 -10.000000000000000
   2.398816324107323 -10.000000000000000
   2.490412180521793 -10.000000000000000
   2.492103818460295 -10.000000000000000
   2.493095197046361 -10.000000000000000
   2.502271672424356 -10.000000000000000
   2.470374504391684 -10.000000000000000
   2.446949372768313 -10.000000000000000
   2.446154997708351 -10.000000000000000
   2.444835594096666 -10.000000000000000
   2.443295666036538 -10.000000000000000
   2.456553299635617  -9.970726490539924
   2.432762135307580  -9.550209177507519
   2.432663642790701  -9.505224364917018
   2.432645876985606  -9.490192487766175
   2.445819581923398  -9.397015056813711
   2.421972708902739  -8.972590088685861
   2.421796238029470  -8.923864351569925
   2.403275359954259  -8.822352966103811
   2.388334168606825  -8.721441382434039
   2.385577163154860  -8.609487951398584
   2.384269123148222  -8.449426242191560
   2.335939528330120  -8.018664350595104
   2.313374798971051  -7.955233594029649
   2.312787216327352  -7.936943966163524
   2.312678821828013  -7.906093910804441
   2.269115393286328  -7.516018740856389
   2.254170667112141  -7.180903149704974
   2.259425538962556  -7.146641038231740
   2.229312861107409  -6.706205330868721
   2.229270548775036  -6.704755338487203
   2.203167601068126  -6.261904593182545
   2.186313221999078  -6.193787335129641
   2.178918245320136  -5.989584904506743
   2.156937109514849  -5.639530380298661
   2.178373783440816  -5.262706036812473
   2.171386925660058  -4.814101736766753
   2.169865720231044  -4.810353297630840
   2.192806029882418  -4.716275166069134
   2.165976639320939  -4.267409650248925
   2.165934021317590  -4.266237487242626
   2.165151800322425  -4.277421013239512
   2.163758041001169  -4.308816723501915
   2.196823763475846  -4.262140344901580
   2.173934819930056  -3.813061019013791
   2.167766020806340  -3.602311953073425
   2.147678692908261  -3.302972818002143
   2.148527215493233  -3.234557920629502
   2.188792093512808  -2.849216505700583
   2.230738648038003  -2.465935358644869
   2.286084265794200  -2.086802949841652
   2.348994292812441  -1.694120498321195
   2.350428253629638  -1.688661147598049
   2.382127025781378  -1.581756646038485];

% startPoints = fcn_Path_removePinchPointInPath
figure(987); clf;
startPoints = fcn_Path_cleanPathFromForwardBackwardJogs(startPoints,987);
%% Functions follow
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   ______                _   _
%  |  ____|              | | (_)
%  | |__ _   _ _ __   ___| |_ _  ___  _ __  ___
%  |  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
%  | |  | |_| | | | | (__| |_| | (_) | | | \__ \
%  |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
%
% See: https://patorjk.com/software/taag/#p=display&f=Big&t=Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%§
